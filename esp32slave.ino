#include <esp_now.h>
#include <WiFi.h>
#include <SPI.h>
#include <Wire.h>
//#include <Adafruit_GFX.h>
//#include <Adafruit_SSD1306.h>
//#include <Fonts/FreeSans9pt7b.h>
#include <ESPAsyncWebSrv.h>
#include <Arduino_JSON.h>

const char *ssid = "ESP32";
const char *password = "12345";

JSONVar board;

AsyncWebServer server(80);
AsyncEventSource events("/events");

String header;

// Structure example to receive data
// Must match the sender structure
typedef struct struct_message {
  int thermalTemp;
  unsigned int readingID;
} struct_message;

// Create a struct_message called myData
struct_message myData;

// callback function that will be executed when data is received
void OnDataRecv(const uint8_t *mac, const uint8_t *incomingData, int len) {
  char macStr[18];
  Serial.print("Packet received from: ");
  snprintf(macStr, sizeof(macStr), "%02x:%02x:%02x:%02x:%02x:%02x",
           mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
  Serial.println(macStr);
  memcpy(&myData, incomingData, sizeof(myData));

  board["int"] = myData.thermalTemp;
  board["readingId"] = String(myData.readingID);
  String jsonString = JSON.stringify(board);
  events.send(jsonString.c_str(), "new_readings", millis());

  Serial.print("Bytes received: ");
  Serial.println(len);
  Serial.print("Int: ");
  Serial.println(myData.thermalTemp);
}

const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML><html>
<head>
  <title>EMBER ALERT MK.1</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.2/css/all.css" integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr" crossorigin="anonymous">
  <link rel="icon" href="data:,">
  <style>
    html {font-family: Arial; display: inline-block; text-align: center;}
    p {  font-size: 1.2rem;}
    body {  margin: 0;}
    .topnav { overflow: hidden; background-color: #780116; color: white; font-size: 1.7rem; }
    .content { padding: 20px; }
    .card { background-color: white; box-shadow: 2px 2px 12px 1px rgba(140,140,140,.5); }
    .cards { max-width: 700px; margin: 0 auto; display: grid; grid-gap: 2rem; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); }
    .reading { font-size: 2.8rem; }
    .packet { color: #bebebe; }
    .card.integer { color: #fd7e14; }
    .card.floating { color: #1b78e2; }
  </style>
</head>
<body style="background-color: #C32F27">
  <div class="topnav">
    <h3>ESP-NOW DASHBOARD</h3>
  </div>
  <div class="content">
    <div class="cards">
      <div class="card integer">
        <h4>THERMAL TEMPERATURE - PROBE 1</h4><i class="fa fa-thermometer" style="font-size:36px"></i><p><span class="reading"><span id="i1"></span></span></p>
      </div>
    </div>
  </div>
<script>
if (!!window.EventSource) {
 var source = new EventSource('/events');
 
 source.addEventListener('open', function(e) {
  console.log("Events Connected");
 }, false);
 source.addEventListener('error', function(e) {
  if (e.target.readyState != EventSource.OPEN) {
    console.log("Events Disconnected");
  }
 }, false);
 
 source.addEventListener('message', function(e) {
  console.log("message", e.data);
 }, false);
 
 source.addEventListener('new_readings', function(e) {
  console.log("new_readings", e.data);
  var obj = JSON.parse(e.data);
  console.log("Parsed data:", obj); // Debugging
  document.getElementById("i1").innerHTML = obj.int;
 }, false);
}
</script>
</body>
</html>)rawliteral";
/*
//OLED INIT
#define SCREEN_WIDTH 128  // OLED display width, in pixels
#define SCREEN_HEIGHT 64  // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
// The pins for I2C are defined by the Wire-library.
// On an arduino UNO:       A4(SDA), A5(SCL)
// On an arduino MEGA 2560: 20(SDA), 21(SCL)
// On an arduino LEONARDO:   2(SDA),  3(SCL), ...
#define OLED_RESET -1        // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C  ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#define NUMFLAKES 10  // Number of snowflakes in the animation example

#define LOGO_HEIGHT 16
#define LOGO_WIDTH 16
static const unsigned char PROGMEM logo_bmp[] = { 0b00000000, 0b11000000,
                                                  0b00000001, 0b11000000,
                                                  0b00000001, 0b11000000,
                                                  0b00000011, 0b11100000,
                                                  0b11110011, 0b11100000,
                                                  0b11111110, 0b11111000,
                                                  0b01111110, 0b11111111,
                                                  0b00110011, 0b10011111,
                                                  0b00011111, 0b11111100,
                                                  0b00001101, 0b01110000,
                                                  0b00011011, 0b10100000,
                                                  0b00111111, 0b11100000,
                                                  0b00111111, 0b11110000,
                                                  0b01111100, 0b11110000,
                                                  0b01110000, 0b01110000,
                                                  0b00000000, 0b00110000 };

static const u_int8_t thermastride_logo[1024] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xe0, 0x04, 0x78, 0xc0, 0x60, 0x7c, 0x7c, 0x7c, 0x7f, 0x0e, 0x00, 0xc0, 0xf1, 0x81, 0xf8, 0x0e,
  0xe0, 0x04, 0x78, 0xc0, 0x20, 0x3c, 0x7c, 0x7c, 0x3e, 0x06, 0x00, 0xc0, 0xf1, 0x80, 0xf8, 0x0e,
  0xe0, 0x04, 0x78, 0xc0, 0x20, 0x1c, 0x3c, 0x7c, 0x3e, 0x06, 0x00, 0xc0, 0x71, 0x80, 0x78, 0x0e,
  0xe0, 0x04, 0x78, 0xc0, 0x20, 0x1c, 0x3c, 0x7c, 0x3e, 0x02, 0x00, 0xc0, 0x71, 0x80, 0x78, 0x0e,
  0xe0, 0x04, 0x78, 0xc0, 0x20, 0x1c, 0x38, 0x7c, 0x3c, 0x02, 0x00, 0xc0, 0x31, 0x80, 0x38, 0x0e,
  0xe0, 0x04, 0x78, 0xc0, 0x20, 0x0c, 0x38, 0x78, 0x3c, 0x06, 0x00, 0xc0, 0x31, 0x80, 0x38, 0x0e,
  0xe0, 0x04, 0x78, 0xc0, 0x20, 0x0c, 0x38, 0x78, 0x3c, 0x06, 0x00, 0xc0, 0x31, 0x80, 0x38, 0x0e,
  0xfc, 0x3c, 0x78, 0xc7, 0xe3, 0x0c, 0x38, 0x78, 0x3c, 0x67, 0xc7, 0xc6, 0x31, 0x8c, 0x38, 0xfe,
  0xfe, 0x7c, 0x78, 0xc7, 0xe3, 0x8c, 0x18, 0x78, 0x3c, 0x77, 0xc7, 0xce, 0x31, 0x8e, 0x18, 0xfe,
  0xfe, 0x7c, 0x78, 0xc7, 0xe3, 0x8c, 0x18, 0x78, 0x3c, 0x7f, 0xc7, 0xce, 0x31, 0x8e, 0x18, 0xfe,
  0xfe, 0x7c, 0x78, 0xc7, 0xe3, 0x8c, 0x10, 0x79, 0x1c, 0x7f, 0xc7, 0xce, 0x31, 0x8f, 0x18, 0xfe,
  0xfe, 0x7c, 0x70, 0xc7, 0xe3, 0x8c, 0x10, 0x79, 0x1c, 0x3f, 0xc7, 0xce, 0x31, 0x8f, 0x18, 0xfe,
  0xfe, 0x7c, 0x00, 0xc0, 0x63, 0x8c, 0x10, 0x79, 0x1c, 0x1f, 0xc7, 0xce, 0x31, 0x8f, 0x18, 0x0e,
  0xfe, 0x7c, 0x00, 0xc0, 0x63, 0x8c, 0x00, 0x79, 0x1c, 0x0f, 0xc7, 0xc6, 0x31, 0x8f, 0x18, 0x0e,
  0xfe, 0x7c, 0x00, 0xc0, 0x60, 0x0c, 0x00, 0x71, 0x1c, 0x07, 0xc7, 0xc0, 0x31, 0x8f, 0x18, 0x0e,
  0xfe, 0x7c, 0x00, 0xc0, 0x60, 0x0c, 0x00, 0x71, 0x1c, 0x07, 0xc7, 0xc0, 0x31, 0x8f, 0x18, 0x0e,
  0xfe, 0x7c, 0x00, 0xc0, 0x60, 0x1c, 0x00, 0x71, 0x9e, 0x03, 0xc7, 0xc0, 0x31, 0x8f, 0x18, 0x0e,
  0xfe, 0x7c, 0x00, 0xc0, 0x60, 0x1c, 0x40, 0x71, 0x9e, 0x03, 0xc7, 0xc0, 0x71, 0x8f, 0x18, 0x0e,
  0xfe, 0x7c, 0x00, 0xc7, 0xe0, 0x1c, 0x40, 0x71, 0x9f, 0x03, 0xc7, 0xc0, 0x71, 0x8f, 0x18, 0xfe,
  0xfe, 0x7c, 0x78, 0xc7, 0xe0, 0x1c, 0x44, 0x70, 0x0f, 0x83, 0xc7, 0xc0, 0x71, 0x8f, 0x18, 0xfe,
  0xfe, 0x7c, 0x78, 0xc7, 0xe0, 0x1c, 0x44, 0x70, 0x0f, 0xc3, 0xc7, 0xc0, 0x71, 0x8f, 0x18, 0xfe,
  0xfe, 0x7c, 0x78, 0xc7, 0xe0, 0x1c, 0x44, 0x70, 0x0d, 0xe3, 0xc7, 0xc4, 0x71, 0x8e, 0x18, 0xfe,
  0xfe, 0x7c, 0x78, 0xc7, 0xe3, 0x1c, 0x44, 0x70, 0x0c, 0xe3, 0xc7, 0xcc, 0x71, 0x8e, 0x18, 0xfe,
  0xfe, 0x7c, 0x78, 0xc7, 0xe3, 0x1c, 0x64, 0x60, 0x0c, 0x43, 0xc7, 0xcc, 0x71, 0x84, 0x38, 0xfe,
  0xfe, 0x7c, 0x78, 0xc0, 0x23, 0x1c, 0x64, 0x60, 0x0c, 0x03, 0xc7, 0xce, 0x31, 0x80, 0x38, 0x0e,
  0xfe, 0x7c, 0x78, 0xc0, 0x23, 0x8c, 0x6c, 0x63, 0x8c, 0x03, 0xc7, 0xce, 0x31, 0x80, 0x38, 0x0e,
  0xfe, 0x7c, 0x78, 0xc0, 0x23, 0x8c, 0x7c, 0x63, 0xc8, 0x03, 0xc7, 0xce, 0x31, 0x80, 0x38, 0x0e,
  0xfe, 0x7c, 0x78, 0xc0, 0x23, 0x8c, 0x7c, 0x63, 0xc0, 0x07, 0xc7, 0xce, 0x31, 0x80, 0x78, 0x0e,
  0xfe, 0x7c, 0x78, 0xc0, 0x23, 0x8c, 0x7c, 0x63, 0xc4, 0x07, 0xc7, 0xce, 0x11, 0x80, 0x78, 0x0e,
  0xfe, 0x7c, 0x78, 0xc0, 0x23, 0x84, 0x7c, 0x63, 0xc6, 0x07, 0xc7, 0xcf, 0x11, 0x80, 0xf8, 0x0e,
  0xfe, 0x7c, 0x78, 0xc0, 0x23, 0xc4, 0x7e, 0x67, 0xc7, 0x0f, 0xc7, 0xcf, 0x11, 0x81, 0xf8, 0x0e,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe
};
*/
void setup() {
  // Initialize Serial Monitor
  Serial.begin(115200);

  Serial.print("Setting AP (Access Point)…");
  // Remove the password parameter, if you want the AP (Access Point) to be open
  WiFi.mode(WIFI_STA);
  WiFi.softAP(ssid);

  IPAddress IP = WiFi.softAPIP();
  Serial.print("Station IP Address: ");
  Serial.println(IP);
  Serial.print("Wi-Fi Channel: ");
  Serial.println(WiFi.channel());
  /*
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;)
      ;  // Don't proceed, loop forever
  }

  display.display();
  delay(2000);  // Pause for 2 seconds

  //Clear the buffer
  display.clearDisplay();
  display.setFont(&FreeSans9pt7b);

  //Display Logo
  display.drawBitmap(0, 0, thermastride_logo, 128, 64, 1);
  display.display();
  display.startscrollright(0x00, 0x0F);
  delay(8200);
  display.stopscroll();
  display.clearDisplay();

  display.setTextSize(1);  // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 32);
  display.println(F("initializing"));
  display.setCursor(64, 40);
  display.println(F("..."));
  display.display();  // Show initial text
  delay(1000);
  */
  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    /*
    display.clearDisplay();
    display.setCursor(0, 0);
    display.println(F("FAILED CONNECTION"));
    display.display();  // Show text
    */
    delay(100);
    return;
  }
/*
  display.clearDisplay();
  display.setCursor(0, 32);
  display.println(F("INITIALIZED!"));
  display.display();
  delay(1000);
*/
  // Once ESPNow is successfully Init, we will register for recv CB to
  // get recv packer info
  esp_now_register_recv_cb(OnDataRecv);

  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send_P(200, "text/html", index_html);
  });

  events.onConnect([](AsyncEventSourceClient *client) {
    if (client->lastId()) {
      Serial.printf("Client reconnected! Last message ID that it got is: %u\n", client->lastId());
    }
    // send event with message "hello!", id current millis
    // and set reconnect delay to 1 second
    client->send("hello!", NULL, millis(), 10000);
  });
  server.addHandler(&events);
  server.begin();
}

void loop() {
  /*
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0, 25);
  display.print("Int");
  display.setTextSize(1);
  display.setCursor(0, 57);
  display.print(myData.thermalTemp);

  display.display();
*/
  static unsigned long lastEventTime = millis();
  static const unsigned long EVENT_INTERVAL_MS = 5000;
  if ((millis() - lastEventTime) > EVENT_INTERVAL_MS) {
    events.send("ping", NULL, millis());
    lastEventTime = millis();
  }
}